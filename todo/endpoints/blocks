Notefish authentication is done with username and password. The password is
hashed on both the server-side and the client-side to aid the security of users
who reuse their passwords. The salt is a function of your user id.

On authentication success, the client is granted an authentication token. This
token will expire after X hours, or never if requested. Active tokens are
visible in the client via the /auth/tokens endpoint, and can be deleted by
any active token.

[ ] - not yet implemented 
[x] - implemented

# checks token in 'authorization' header
[x] GET /auth                           -> ["ok", "token_valid"]
[x] PUT /auth/login                     -> ["ok", "token_granted", "<token>"]
      :login                            ; will try as both username & email
      :password                                
      :device_name
[x] PUT /auth/register                  -> ["ok", "token_granted", "<token>"]
      :email
      :username
      :password
[ ] PUT /auth/reset                     -> ["ok", "email_sent"]
      :email
    
Requests to endpoints listed further in this document implicitly require a
valid authentication token, provided in the Authorization header like:

Authorization: Bearer <token>
    
[ ] GET /api/v1/token                   -> ["ok", "token_valid"]
[ ] GET /api/v1/token/all               -> ["ok", ["<token1>", "<token2>", ...]]
[ ] DELETE /api/v1/auth                 -> ["ok", "logged_out"]
[ ] DELETE /api/v1/auth/:token          -> ["ok", "token_deleted"]
    
[ ] GET /api/v1/note/:id                -> ["ok", %Note[...]]
# if true, blocks (content) are returned
      :blocks, default: true        ; [true, false]
# if true, backlinks (blocks which referenced this Note) are returned
      :backlinks, default: false    ; [true, false]

# :id is used when updating an existing note
# in that case, unmodified fields can be omitted
[ ] PUT /api/v1/note                    -> ["ok", %Note[...]] 
      :id (optional)
      :title
      :tags                             ; tags list in title
      :fields                           ; indexed map of string to string value
      :archived, default: false         ; [true, false]

# :blocks must be present if :id is absent (new note)
# if updating an existing note, :blocks will full replace all db blocks
# :diff is preferred, since this minimizes calls to the database
# the server will return a hash(body(b1) + "\n" + body(b2) + ...) so that the
# client can validate the update
      :blocks (optional)                ; parsed list of blocks based on fishy language
      :diff (optional)

# blocks format ; ranks are automatically assigned
  [
    %{"body" => "The content of this block #a #b #c [[Note Title]]",
      "tags" => ["a", "b", "c"],
      "refs" => %{"Note Title" => "some_note_id"}},
    %{"body" => "The content of this block #a #b #c [[Note Title]]",
      "tags" => ["a", "b", "c"],
      "refs" => %{"Note Title" => "some_note_id"},
      "children" =>
        [
          %{"body" => "Some child note"},
          %{"body" => "Some child note},
          ...
        ]},
    ...
  ]

# diff format
  [
    %{"op" => "delete",
      "id" => "idXYZ"},
    %{"op" => "insert",
      "at"   => 102, # new block rank
      "body" => "The content of this block #a #b #c [[Note Title]]",
      "tags" => ["a", "b", "c"],
      "refs" => %{"Note Title" => "some_note_id"}},
    %{"op" => "amend",
      # only changed fields needed
      "id"     => "idXYZ",
      "body"   => "The content of this block #a #b #c [[Note Title]]",
      "parent" => "idXYZ"}
  ]

    %{"id" => "idXYZ",
      "d" => ["delete"]},
    # absent id implies new block
    %{"d" => ["insert", "idXYZ"],
      "body" => "The contents of the new block are as follows...",
      "tags" => ["recomputed", "tag", "list"],
      "refs" => %{"Some Note Title" => "note_id"}},
    %{"id" => "id3",
      "state" => "amended",
      "children" => [%{}, %{}, ...]}
  ]

[ ] DELETE /api/v1/note/:id             -> ["ok", "deleted"] 

# block is returned with its immediate children
# this endpoint's functionality is equivalent to when backlinks are fetched
# by the server
[ ] GET /api/v1/block/:id               -> ["ok", %Block{}]

# a note query can match on the note title or a note's block
[ ] GET /api/v1/note/query              -> ["ok", [%Result{}, ...]]
      :preview, default: long           ; [short, long]
      :query, default: ""
      :folder, default: ""
      :tags, default: []                ; must have this tag
      :fields, default: []              ; must have this field, key => value
      :author, default: <you>           ; [:any, <username>]
      :sort, default: edited            ; [edited, created]
      :archives, default: false         ; [true, false]
 
RETURNS [
          %{"type" => "note",
            "note" => %{...note metadata}},
          %{"type" => "block",
            "note" => %{...containing note metadata},
            "block" => %{...matching block}},
          ...more results
        ]

[ ] GET /api/v1/note/block/:id          -> ["ok", %Block["text" => "...", "refs" => [...], "children" => [...]]]
    
# Bulk operations, available when multiple Notes are selected
# :archived, :folder, :tags and :fields are mutually exclusive
# and :action determines if a property is added or removed.
[ ] PUT /api/v1/note/bulk               -> ["ok", %["rows_changed" => x]] 
      :delete, default: false           ; [true, false]
      :archived (optional)              ; [true, false]
      :action (optional)                ; [add, remove]
      :folder (optional)
      :fields (optional)
    
# Return all folders for current user
[ ] GET /api/v1/folders/:space          -> ["ok", [%Folder["name" => "some name", "children" => [...]], ...]]
# Get Notes in a given folder
[ ] GET /api/v1/folders/:space/:a/:b    -> ["ok", [%Note[...], %Note[...], ...]]
# Create folder :c in :b
[ ] PUT /api/v1/folders/:space/:a/:b    -> ["ok", "created"]
# Delete folder :c in :b
[ ] DELETE /api/v1/folder/:space/:a/:b  -> ["ok", "deleted"]
    
# Return all known tags for user
# intended for auto completion
[ ] GET /api/v1/tags                    -> ["ok", ["tag1, "tag2", ...]]
    
# Return all known field keys for user
# intended for auto completion
[ ] GET /api/v1/fields                  -> ["ok", ["key1, "key2", ...]]
